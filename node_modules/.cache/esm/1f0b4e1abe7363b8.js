let createError,express,logger,expressPino,cors,serve,setup,yaml,currencyRouter,NotFoundError;_be7‍.x([["default",()=>_be7‍.o]]);_be7‍.w("http-errors",[["default",["createError"],function(v){createError=v}]]);_be7‍.w("express",[["default",["express"],function(v){express=v}]]);_be7‍.w("./lib/logger",[["default",["logger"],function(v){logger=v}]]);_be7‍.w("express-pino-logger",[["default",["expressPino"],function(v){expressPino=v}]]);_be7‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_be7‍.w("swagger-ui-express",[["serve",["serve"],function(v){serve=v}],["setup",["setup"],function(v){setup=v}]]);_be7‍.w("yamljs",[["default",["yaml"],function(v){yaml=v}]]);_be7‍.w("./routes/currency",[["default",["currencyRouter"],function(v){currencyRouter=v}]]);_be7‍.w("./errors/NotFoundError",[["default",["NotFoundError"],function(v){NotFoundError=v}]]);/**
 * Main app.js file for the currency exchange microservice
 */











var swaggerDocument = yaml.load('swagger.yaml');
swaggerDocument.host = process.env.HOST_IP || 'localhost:4001';
var scheme = process.env.SCHEME || 'http';
swaggerDocument.schemes = [scheme];

var app = express();
var api = '/api/v1';

const expressLogger = expressPino({ logger });
app.use(expressLogger);

app.use(cors());

app.use(express.json());
app.use(
  express.urlencoded({
    extended: false,
  })
);

app.use(api + '/currency', currencyRouter);

app.use('/', serve, setup(swaggerDocument));

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
// it must have 4 parameters for Express to know that this is an error middleware
// eslint-disable-next-line no-unused-vars
app.use(function(err, req, res, next) {
  logger.error(err);
  if (err instanceof NotFoundError) {
    return res.status(404).json({ error: err.message });
  }

  // we only return the reason in dev
  if (req.app.get('env') === 'development') {
    return res.status(err.status || 500).json({ error: err.message });
  }
  return res.sendStatus(err.status || 500);
});

process.on('unhandledRejection', error => {
  _be7‍.g.console.error('unhandledRejection', error.message);
});

_be7‍.d(app);
